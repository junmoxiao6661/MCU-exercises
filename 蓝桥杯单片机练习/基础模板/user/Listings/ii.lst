C51 COMPILER V9.59.0.0   II                                                                02/22/2024 16:06:14 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE II
OBJECT MODULE PLACED IN .\Objects\ii.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\driver\ii.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\driver) DEBUG OBJECTEX
                    -TEND PRINT(.\Listings\ii.lst) TABS(2) OBJECT(.\Objects\ii.obj)

line level    source

   1          #include "iic.h"
*** WARNING C318 IN LINE 1 OF ..\driver\ii.c: can't open file 'iic.h'
   2          #include <STC15F2K60S2.H>
   3          #include "intrins.h"
   4          sbit scl=P2^0;
   5          sbit sda=P2^1;
   6          /*  #   I2C代码片段说明
   7            1.  本文件夹中提供的驱动代码供参赛选手完成程序设计参考。
   8            2.  参赛选手可以自行编写相关代码或以该代码为基础，根据所选单片机类型、运行速度和试题
   9              中对单片机时钟频率的要求，进行代码调试和修改。
  10          */
  11          
  12          #define DELAY_TIME  5
  13          
  14          //
  15          static void I2C_Delay(unsigned char n)
  16          {
  17   1          do
  18   1          {
  19   2              _nop_();_nop_();_nop_();_nop_();_nop_();
  20   2              _nop_();_nop_();_nop_();_nop_();_nop_();
  21   2              _nop_();_nop_();_nop_();_nop_();_nop_();    
  22   2          }
  23   1          while(n--);       
  24   1      }
  25          
  26          //
  27          void I2CStart(void)
  28          {
  29   1          sda = 1;
  30   1          scl = 1;
  31   1        I2C_Delay(DELAY_TIME);
  32   1          sda = 0;
  33   1        I2C_Delay(DELAY_TIME);
  34   1          scl = 0;    
  35   1      }
  36          
  37          //
  38          void I2CStop(void)
  39          {
  40   1          sda = 0;
  41   1          scl = 1;
  42   1        I2C_Delay(DELAY_TIME);
  43   1          sda = 1;
  44   1        I2C_Delay(DELAY_TIME);
  45   1      }
  46          
  47          //
  48          void I2CSendByte(unsigned char byt)
  49          {
  50   1          unsigned char i;
  51   1        
  52   1          for(i=0; i<8; i++){
  53   2              scl = 0;
C51 COMPILER V9.59.0.0   II                                                                02/22/2024 16:06:14 PAGE 2   

  54   2          I2C_Delay(DELAY_TIME);
  55   2              if(byt & 0x80){
  56   3                  sda = 1;
  57   3              }
  58   2              else{
  59   3                  sda = 0;
  60   3              }
  61   2          I2C_Delay(DELAY_TIME);
  62   2              scl = 1;
  63   2              byt <<= 1;
  64   2          I2C_Delay(DELAY_TIME);
  65   2          }
  66   1        
  67   1          scl = 0;  
  68   1      }
  69          
  70          //
  71          unsigned char I2CReceiveByte(void)
  72          {
  73   1        unsigned char da;
  74   1        unsigned char i;
  75   1        for(i=0;i<8;i++){   
  76   2          scl = 1;
  77   2          I2C_Delay(DELAY_TIME);
  78   2          da <<= 1;
  79   2          if(sda) 
  80   2            da |= 0x01;
  81   2          scl = 0;
  82   2          I2C_Delay(DELAY_TIME);
  83   2        }
  84   1        return da;    
  85   1      }
  86          
  87          //
  88          unsigned char I2CWaitAck(void)
  89          {
  90   1        unsigned char ackbit;
  91   1        
  92   1          scl = 1;
  93   1        I2C_Delay(DELAY_TIME);
  94   1          ackbit = sda; 
  95   1          scl = 0;
  96   1        I2C_Delay(DELAY_TIME);
  97   1        
  98   1        return ackbit;
  99   1      }
 100          
 101          //
 102          void I2CSendAck(unsigned char ackbit)
 103          {
 104   1          scl = 0;
 105   1          sda = ackbit; 
 106   1        I2C_Delay(DELAY_TIME);
 107   1          scl = 1;
 108   1        I2C_Delay(DELAY_TIME);
 109   1          scl = 0; 
 110   1        sda = 1;
 111   1        I2C_Delay(DELAY_TIME);
 112   1      }
 113          unsigned char da_read(unsigned char addr)
 114          {
 115   1        unsigned char temp=0;
C51 COMPILER V9.59.0.0   II                                                                02/22/2024 16:06:14 PAGE 3   

 116   1        I2CStart();
 117   1        I2CSendByte(0x90);
 118   1        I2CWaitAck();
 119   1        I2CSendByte(addr);
 120   1        I2CWaitAck();
 121   1        I2CStart();
 122   1        I2CSendByte(0x91);
 123   1        I2CWaitAck();
 124   1        temp=I2CReceiveByte();
 125   1        I2CSendAck(1);
 126   1        I2CStop();
 127   1        return temp;  
 128   1      } 
 129          void da_write(unsigned char dat)
 130          {
 131   1        I2CStart();
 132   1        I2CSendByte(0x90);
 133   1        I2CWaitAck();
 134   1        I2CSendByte(0x41);
 135   1        I2CWaitAck();
 136   1        I2CSendByte(dat);
 137   1        I2CWaitAck();
 138   1        I2CStop();
 139   1      }
 140          
 141          void eep_write(unsigned char * dat,unsigned char addr,unsigned char num)
 142          {
 143   1        I2CStart();
 144   1        I2CSendByte(0xA0);
 145   1        I2CWaitAck();
 146   1        I2CSendByte(addr);
 147   1        I2CWaitAck();
 148   1        while(num--)
 149   1        {
 150   2          I2CSendByte(* dat++);
 151   2          I2CWaitAck();
 152   2          I2C_Delay(200);
 153   2        }
 154   1          
 155   1          I2CStop();
 156   1      }
 157          void eep_read(unsigned char * dat,unsigned char addr,unsigned char num)
 158          {
 159   1        I2CStart();
 160   1        I2CSendByte(0xA0);
 161   1        I2CWaitAck();
 162   1        I2CSendByte(addr);
 163   1        I2CWaitAck();
 164   1        
 165   1        I2CStart();
 166   1        I2CSendByte(0xA1);
 167   1        I2CWaitAck();
 168   1        while(num--)
 169   1        {
 170   2          * dat++=I2CReceiveByte();
 171   2          if(num)I2CSendAck(0);
 172   2          else I2CSendAck(1);
 173   2        }
 174   1        I2CStop();
 175   1      } 


C51 COMPILER V9.59.0.0   II                                                                02/22/2024 16:06:14 PAGE 4   

MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    380    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      10
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
